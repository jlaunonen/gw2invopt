# Generated by Django 4.0.2 on 2022-02-20 10:19

import django.db.models.deletion
from django.db import migrations, models

import gw2inv_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "race",
                    models.CharField(
                        choices=[
                            ("Asura", "Asura"),
                            ("Charr", "Charr"),
                            ("Human", "Human"),
                            ("Norn", "Norn"),
                            ("Sylvari", "Sylvari"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "profession",
                    models.CharField(
                        choices=[
                            ("Elementalist", "Elementalist"),
                            ("Engineer", "Engineer"),
                            ("Guardian", "Guardian"),
                            ("Mesmer", "Mesmer"),
                            ("Necromancer", "Necromancer"),
                            ("Ranger", "Ranger"),
                            ("Revenant", "Revenant"),
                            ("Thief", "Thief"),
                            ("Warrior", "Warrior"),
                        ],
                        max_length=32,
                    ),
                ),
                ("level", models.PositiveIntegerField()),
                ("deleted", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("chat_link", models.CharField(max_length=32)),
                ("icon_url", models.URLField(null=True)),
                ("description", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Armor", "Armor"),
                            ("Back", "Back"),
                            ("Bag", "Bag"),
                            ("Consumable", "Consumable"),
                            ("Container", "Container"),
                            ("CraftingMaterial", "Crafting material"),
                            ("Gathering", "Gathering tool"),
                            ("Gizmo", "Gizmo"),
                            ("Key", "Key"),
                            ("MiniPet", "Miniature"),
                            ("Tool", "Salvage kit"),
                            ("Trait", "Trait guide"),
                            ("Trinket", "Trinket"),
                            ("Trophy", "Trophy"),
                            ("UpgradeComponent", "Upgrade component"),
                            ("Weapon", "Weapon"),
                        ],
                        max_length=64,
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("Junk", "Junk"),
                            ("Basic", "Basic"),
                            ("Fine", "Fine"),
                            ("Masterwork", "Masterwork"),
                            ("Rare", "Rare"),
                            ("Exotic", "Exotic"),
                            ("Ascended", "Ascended"),
                            ("Legendary", "Legendary"),
                        ],
                        max_length=64,
                    ),
                ),
                (
                    "flags",
                    gw2inv_app.models.FlagCharField(
                        choices=[
                            ("AccountBindOnUse", "Account bound on use"),
                            ("AccountBound", "Account bound on acquire"),
                            ("Attuned", "If the item is Attuned"),
                            ("BulkConsume", "If the item can be bulk consumed"),
                            (
                                "DeleteWarning",
                                "If the item will prompt the player with a warning when deleting",
                            ),
                            ("HideSuffix", "Hide the suffix of the upgrade component"),
                            ("Infused", "If the item is infused"),
                            ("MonsterOnly", "(monster only)"),
                            ("NoMysticForge", "Not usable in the Mystic Forge"),
                            ("NoSalvage", "Not salvageable"),
                            ("NoSell", "Not sellable"),
                            ("NotUpgradeable", "Not upgradeable"),
                            ("NoUnderwater", "Not available underwater"),
                            ("SoulbindOnAcquire", "Soulbound on acquire"),
                            ("SoulBindOnUse", "Soulbound on use"),
                            ("Tonic", "If the item is a tonic"),
                            ("Unique", "Unique"),
                        ],
                        max_length=255,
                    ),
                ),
                ("level", models.PositiveSmallIntegerField()),
                (
                    "restrictions",
                    gw2inv_app.models.FlagCharField(
                        choices=[
                            ("Asura", "Asura"),
                            ("Charr", "Charr"),
                            ("Female", "Female"),
                            ("Human", "Human"),
                            ("Norn", "Norn"),
                            ("Sylvari", "Sylvari"),
                            ("Elementalist", "Elementalist"),
                            ("Engineer", "Engineer"),
                            ("Guardian", "Guardian"),
                            ("Mesmer", "Mesmer"),
                            ("Necromancer", "Necromancer"),
                            ("Ranger", "Ranger"),
                            ("Thief", "Thief"),
                            ("Warrior", "Warrior"),
                        ],
                        max_length=255,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PendingData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target",
                    models.CharField(
                        choices=[
                            ("Character", "Character"),
                            ("Item", "Item"),
                            ("Slot", "Slot"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "api_id",
                    models.CharField(max_length=64, verbose_name="API ID, int/str"),
                ),
                ("json", models.TextField()),
                ("is_update", models.BooleanField(default=False)),
                ("completed", models.DateTimeField(null=True)),
                ("failed", models.DateTimeField(null=True)),
                ("failed_count", models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="ItemSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("count", models.PositiveIntegerField(default=1)),
                ("charges", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "binding",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Account", "Account bound"),
                            ("Character", "Soulbound to {}"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "bound_to",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="bound_slots",
                        to="gw2inv_app.character",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slots",
                        to="gw2inv_app.character",
                    ),
                ),
                (
                    "infusions",
                    models.ManyToManyField(
                        related_name="as_infusions", to="gw2inv_app.Item"
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="in_slots",
                        to="gw2inv_app.item",
                    ),
                ),
                (
                    "upgrades",
                    models.ManyToManyField(
                        related_name="as_upgrades", to="gw2inv_app.Item"
                    ),
                ),
            ],
        ),
    ]
